/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2010 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include "libproblem/problem.h"
#include "libplanner/kthquery.h"
#include <Inventor/SoDB.h>

using namespace std;

int main(int argc, char* argv[]){   


  if( argv[1] == "-h" || argc != 3 ){
    std::cout << "Kautham console has been called without a problem file path, "
      << "or you want to read this help. "
      << "The correct way to run this program is as follow: \n\n"
      << "KauthamConsole xml_problem_file number_of_runs \n\n" 
      << "where xml_problem_file is a relative path of the problem to be solved "
      << "and the number_of_runs is the integer number that the problem is trying to be "
      << "solved. Please take care with the relative paths where robots files and "
      << "scenes files are located relative to the problem file.";
    return 0;
  }

  //=====================
  SoDB::init();

  string dir = argv[0];

  // If this is a windows executable, the path is unix format converted, changing  "\" for "/"
  size_t found;
  found = dir.find_first_of("\\");
  while (found != string::npos){
    dir[found]='/';
    found = dir.find_first_of("\\",found+1);
  }

  dir.erase(dir.find_last_of("/") + 1, dir.length());
  string absPath = dir;
  absPath.append( argv[1] );

  found = absPath.find_first_of("\\");
  while (found != string::npos){
    absPath[found]='/';
    found = absPath.find_first_of("\\",found+1);
  }

  string baseName = absPath;
  baseName.erase(0,baseName.find_last_of("/") + 1);
  baseName.erase(baseName.find_first_of("."), baseName.length());

  string soluFile = dir + baseName;
  soluFile.append("_solution_");
  std::cout << "Kautham is opening a problem file: " << absPath << endl;

  try{
    int tryTimes = atoi( argv[2] );

    cout << "The problem will be trying to solve " << tryTimes << " times.\n" ;
    int badSol = 0;
    Problem* _problem = new Problem();
    stringstream ss;
    ss.str(soluFile);

    if( _problem->setupFromFile( absPath ) ){
      cout << "The problem file has been loaded successfully.\n";
      Planner* _planner = _problem->getPlanner();
      SampleSet* _samples = _problem->getSampleSet();
      unsigned int d =  _samples->getSampleAt(0)->getDim();
      //vector<KthReal> init(d), goal(d);
      vector<KthReal> init( _samples->getSampleAt(0)->getCoords());
      vector<KthReal> goal( _samples->getSampleAt(1)->getCoords());
      KthReal times[2]={0., 0.};
      int sampCount[3]={0, 0, 0};


      //ofstream outputFile("stats.kth", ios::out|ios::trunc);
      ofstream outputFile("stats.kth", ios::out|ios::app);

      for(int i = 0; i < tryTimes; i++){
        _samples->clear();
        Sample* smp = new Sample(d);
        smp->setCoords( init );
        _samples->add( smp );
        smp = new Sample(d);
        smp->setCoords( goal );
        _samples->add( smp );
        _planner->setInitSamp( _samples->getSampleAt(0) );
        _planner->setGoalSamp( _samples->getSampleAt(1) );



        if(_planner->solveAndInherit()){
          KthQuery& tmp = _planner->getQueries().at( _planner->getQueries().size() - 1 );
          times[0] = tmp.getTotalTime();
          times[1] = tmp.getSmoothTime();
          sampCount[0] = tmp.getGeneratedSamples();
          sampCount[1] = tmp.getConnectedSamples();
          sampCount[2] = tmp.getPath().size();
          //ss << i << ".kps";
          //_planner->saveData( soluFile.c_str() );

		  if( outputFile.is_open() ){
			outputFile << "\nTotal time: \t"        << times[0]     << endl;
			outputFile << "Smooth time: \t"       << times[1]      << endl;
			outputFile << "Tried samples: \t"     << sampCount[0]  << endl;
			outputFile << "Connected samples: \t" << sampCount[1]  << endl;
			outputFile << "Nodes in solution path: \t"   << sampCount[2] << endl;
	      }else           //there were any problems with the copying process
		  {
				throw(1);
		  }

        }else{
          cout << "The problem has not been solve successfully.\n";
          badSol++;

        }
      }


	      if( outputFile.is_open() ){
			outputFile << "\nProblem solved:\t"     << absPath                << endl;
			outputFile << "TryTimes: \t"          << tryTimes               << endl;
			outputFile << "BadSolved: \t"         << badSol                 << endl;
	      }else           //there were any problems with the copying process
          throw(1);

	      outputFile.close();



    }else{
      cout << "The problem file has not been loaded successfully. "
           << "Please take care with the problem definition.\n";
      throw(1);
    }
    delete _problem;
  }catch(...){
    cout << "Something is wrong with the problem. Please run the "
      << "problem with the Kautham2 application al less once in order "
      << "to verify the correctness of the problem formulation.\n";

    return 1;
  }




  return 0;
}

