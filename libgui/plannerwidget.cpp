/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 
 
#include "plannerwidget.h"
#include "gui.h"


namespace libGUI{
  PlannerWidget::PlannerWidget(Planner* plan, SampleSet* samp, bool camera, GUI* gui):KauthamWidget(plan){
    _samples = samp;
    _planner = plan;
    _gui = gui;
    _stepSim = 0;
    
    tmpLabel = new QLabel(this);
    tmpLabel->setText("Init configuration is the sample:");
    spnInit = new QSpinBox(this);

    hboxLayout = new QHBoxLayout();
    hboxLayout->addWidget(tmpLabel);
    hboxLayout->addWidget(spnInit);
    vboxLayout->addLayout(hboxLayout);

    tmpLabel = new QLabel(this);
    tmpLabel->setText("Goal configuration is the sample:");
    spnGoal = new QSpinBox(this);

    hboxLayout = new QHBoxLayout();
    hboxLayout->addWidget(tmpLabel);
    hboxLayout->addWidget(spnGoal);
    vboxLayout->addLayout(hboxLayout);

    chkCamera = new QCheckBox("Move the camera.");
    chkCamera->setChecked(false);

    if(camera = true){
      vboxLayout->addWidget(chkCamera);
    }

    hboxLayout = new QHBoxLayout();
    hboxLayout->setObjectName(QString::fromUtf8("hboxLayout"));

    btnGetPath = new QPushButton(this);
    btnGetPath->setObjectName(QString::fromUtf8("getPathButton"));

    hboxLayout->addWidget(btnGetPath);

    btnSaveData = new QPushButton(this);
    btnSaveData->setObjectName(QString::fromUtf8("saveButton"));

    hboxLayout->addWidget(btnSaveData);
	
    vboxLayout->addLayout(hboxLayout);

    hboxLayout2 = new QHBoxLayout();
    hboxLayout2->setObjectName(QString::fromUtf8("hboxLayout2"));


    btnLoadData = new QPushButton(this);
    btnLoadData->setObjectName(QString::fromUtf8("loadButton"));

    hboxLayout2->addWidget(btnLoadData);

    btnMove = new QPushButton(this);
    btnMove->setObjectName(QString::fromUtf8("moveButton"));
    btnMove->setEnabled(false);

    hboxLayout2->addWidget(btnMove);

    vboxLayout->addLayout(hboxLayout2);

    btnGetPath->setText(QApplication::translate("Form", "get Path", 0, QApplication::UnicodeUTF8));
    btnSaveData->setText(QApplication::translate("Form", "save Data", 0, QApplication::UnicodeUTF8));
    btnLoadData->setText(QApplication::translate("Form", "load Data", 0, QApplication::UnicodeUTF8));
    btnMove->setText(QApplication::translate("Form", "start Move ", 0, QApplication::UnicodeUTF8));
    
    _plannerTimer = new QTimer( this ); 

    if(_planner != NULL ){
      connect(btnGetPath, SIGNAL( clicked() ), this, SLOT( getPathCall() ) );
      connect(btnSaveData, SIGNAL( clicked() ), this, SLOT( saveDataCall() ) );
      connect(btnLoadData, SIGNAL( clicked() ), this, SLOT( loadDataCall() ) );
      connect(btnMove, SIGNAL( clicked() ), this, SLOT( simulatePath() ) );
      connect(_plannerTimer, SIGNAL(timeout()), this, SLOT(moveAlongPath()) );
      connect(spnInit, SIGNAL( valueChanged( int )), this, SLOT( showSample( int )));
      connect(spnGoal, SIGNAL( valueChanged( int )), this, SLOT( showSample( int )));
    }
	}

  void PlannerWidget::getPathCall(){
    _gui->setCursor(QCursor(Qt::WaitCursor));
    if(_planner != NULL ){
      _planner->setInitSamp(_samples->getSampleAt(spnInit->text().toInt()));
      _planner->setGoalSamp(_samples->getSampleAt(spnGoal->text().toInt()));

    if(_planner->solveAndInherit())
      btnMove->setEnabled(true);
    else 
      btnMove->setEnabled(false);
    }
    _gui->setCursor(QCursor(Qt::ArrowCursor));
  }

  void PlannerWidget::saveDataCall(){
    if(_planner != NULL ){
      QString path,dir;
	    QDir workDir;
      _gui->setCursor(QCursor(Qt::WaitCursor));
      path = QFileDialog::getSaveFileName( _gui,
		      "Save planner data as...", workDir.absolutePath(),
		      "Kautham Planner Solution (*.kps)");
      if(!path.isEmpty()){
        sendText(QString("Kautham is saving a planner data in a file: " + path).toUtf8().constData() );
        dir = path;
        dir.truncate(dir.lastIndexOf("/"));
        _planner->saveData(path.toUtf8().constData());
      }
      _gui->setCursor(QCursor(Qt::ArrowCursor));
      setTable(_planner->getParametersAsString());      
    }
  }

  //void PlannerWidget::setIniGoalCall(){
  //  if(_planner != NULL ){
  //    _planner->setIniGoal();
  //  }
  //}
  void PlannerWidget::loadDataCall(){
    _gui->setCursor(QCursor(Qt::WaitCursor));
    if(_planner != NULL ){
      QString path,dir;
	    QDir workDir;
      _gui->setCursor(QCursor(Qt::WaitCursor));
      path = QFileDialog::getOpenFileName( _gui,
		      "Load a file...", workDir.absolutePath(),
		      "Kautham Planner Solution (*.kps)");
      if(!path.isEmpty()){
        sendText(QString("The solution file in " + path + " is being loaded.").toUtf8().constData() );
        dir = path;
        dir.truncate(dir.lastIndexOf("/"));
        _planner->loadData(path.toUtf8().constData());
      }
      _gui->setCursor(QCursor(Qt::ArrowCursor));
      setTable(_planner->getParametersAsString());      
    }
    _gui->setCursor(QCursor(Qt::ArrowCursor));
  }
  

  void PlannerWidget::simulatePath(){
    if(btnMove->text() == QApplication::translate("Form", "start Move ", 0, QApplication::UnicodeUTF8)){
      _plannerTimer->start(200);
      //_stepSim = 0;
      btnMove->setText(QApplication::translate("Form", "stop Move ", 0, QApplication::UnicodeUTF8));
    }else{
      _plannerTimer->stop();
      btnMove->setText(QApplication::translate("Form", "start Move ", 0, QApplication::UnicodeUTF8));
    }

  }

  void PlannerWidget::moveAlongPath(){
    _planner->moveAlongPath(_stepSim);

    // It moves the camera if the associated planner provides the
    // transformation information of the camera
    if( chkCamera->isChecked() && _gui != NULL
       && _planner->getCameraMovement(_stepSim) != NULL ){
      _gui->setActiveCameraTransform(*_planner->getCameraMovement(_stepSim));
    }

    _stepSim += _planner->getSpeedFactor();
  }

  void PlannerWidget::showSample(int index)
  {
	int max;

  if(_samples->getSize() < _planner->getMaxNumSamples()) max = _samples->getSize();
	else 
	{
		max = _planner->getMaxNumSamples();
		if(index>max) cout<<"Using a maximum of "<<max<<" samples"<<endl;
	}
	
    if( _samples->getSize() > 1 ){
      spnInit->setMaximum(max- 1 );
      spnGoal->setMaximum(max- 1 );
    }
	if( index >= 0 && index < max ){
		Sample *smp =  _samples->getSampleAt(index);
      _planner->wkSpace()->moveTo(smp );
	
	  vector<KthReal> c = smp->getCoords();
	  cout << "sample: ";
		  for(int i=0; i<c.size(); i++) cout << c[i] << ", ";
	  cout << endl;
	}
	else
	{
      spnInit->setValue( 0 );
      spnGoal->setValue( 0 );
	}
  }
}
