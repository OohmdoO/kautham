/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 
 
#include <QtGui>
#include "controlwidget.h"
#include <QString>


namespace Kautham {

    ControlWidget::ControlWidget(Problem* prob, vector<DOFWidget*> DOFWidgets, bool robot) {
        _ptProblem = prob;
        robWidget = robot;
        _DOFWidgets = DOFWidgets;
        string names = "This|is|a|test";
        if (robot) {
            names = _ptProblem->wSpace()->getRobControlsName();
        } else {
            names = _ptProblem->wSpace()->getObsControlsName();
        }
        gridLayout = new QGridLayout(this);
        gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
        vboxLayout = new QVBoxLayout();
        vboxLayout->setObjectName(QString::fromUtf8("vboxLayout"));
        QLabel* tempLab;
        QSlider* tempSli;
        QString content(names.c_str());
        QStringList cont = content.split("|");
        QStringList::const_iterator iterator;
        for (iterator = cont.constBegin(); iterator != cont.constEnd();
             ++iterator) {
            tempLab = new QLabel(this);
            tempLab->setObjectName(/*QString("lbl")  +*/ (*iterator).toUtf8().constData());
            content = (*iterator).toUtf8().constData();
            tempLab->setText(content.append(" = 0.5"));
            this->vboxLayout->addWidget(tempLab);
            labels.push_back(tempLab);

            tempSli = new QSlider(this);
            tempSli->setObjectName(/*"sld" + */(*iterator).toUtf8().constData());
            tempSli->setOrientation(Qt::Horizontal);
            tempSli->setMinimum(0);
            tempSli->setMaximum(1000);
            tempSli->setSingleStep(1);
            tempSli->setValue(500);
            vboxLayout->addWidget(tempSli);
            sliders.push_back(tempSli);
            QObject::connect(tempSli,SIGNAL(valueChanged(int)),SLOT(sliderChanged(int)));
        }

        vboxLayout1 = new QVBoxLayout();
        btnUpdate = new QPushButton(this);
        btnUpdate->setText("Update Controls To Last Moved Sample");
        btnUpdate->setObjectName(QString::fromUtf8("Update Controls"));
        connect(btnUpdate, SIGNAL( clicked() ), this, SLOT( updateControls() ) );
        vboxLayout1->addWidget(btnUpdate);

        values.resize(sliders.size());
        for(int i=0; i<values.size(); i++)
            values[i]=0.5;

        vboxLayout->addLayout(vboxLayout1);
        gridLayout->addLayout(vboxLayout,0,1,1,1);

    }

    ControlWidget::~ControlWidget(){
        for(unsigned int i=0; i<sliders.size(); i++){
            delete (QSlider*)sliders[i];
            delete (QLabel*)labels[i];
        }
        values.clear();
    }

    void ControlWidget::updateControls(){
        Sample *s;
        if (robWidget) {
            s  = _ptProblem->wSpace()->getLastRobSampleMovedTo();
        } else {
            s  = _ptProblem->wSpace()->getLastObsSampleMovedTo();
        }
        if (s != NULL){
            for (int j = 0; j < values.size(); j++)
                values[j] = s->getCoords()[j];

            setValues();
        }
    }

    void ControlWidget::sliderChanged(int value){
        QString tmp;
        for(unsigned int i=0; i<sliders.size(); i++){
            values[i]=(KthReal)((QSlider*)sliders[i])->value()/1000.0;

            tmp = labels[i]->text().left(labels[i]->text().indexOf("=") + 2);
            labels[i]->setText( tmp.append( QString().setNum(values[i],'g',5)));
        }

        Sample *s;
        if (robWidget) {
            _ptProblem->setCurrentRobControls(values,0);
            s = _ptProblem->wSpace()->getLastRobSampleMovedTo();
        } else {
            _ptProblem->setCurrentObsControls(values,0);
            s = _ptProblem->wSpace()->getLastObsSampleMovedTo();
        }

        vector<KthReal> coords;
        if (s == NULL) {
            coords.resize(values.size());
            for (int i = 0; i < values.size(); i++) coords[i] = 0.5;
        }
        else{
            coords = s->getCoords();
        }

        for (int j = 0; j < values.size(); j++) {
            coords[j]=values[j];
        }

        Sample *s2 = new Sample(values.size());
        s2->setCoords(coords);

        vector <float> params;
        if (robWidget) {
            _ptProblem->wSpace()->moveRobotsTo(s2);
            for (uint i = 0; i < _DOFWidgets.size(); i++) {
                _ptProblem->wSpace()->getRobot(i)->control2Parameters(coords,params);
                ((DOFWidget*)_DOFWidgets.at(i))->setValues(params);
            }
        } else {
            _ptProblem->wSpace()->moveObstaclesTo(s2);
            for (uint i = 0; i < _DOFWidgets.size(); i++) {
                //_ptProblem->wSpace()->getObstacle(i)->control2Parameters(coords,params);
                //((DOFWidget*)_DOFWidgets.at(i))->setValues(params);
            }
        }
    }

    void ControlWidget::setValues(){
        for(unsigned int i = 0; i < values.size(); i++)
            ((QSlider*)sliders[i])->setValue((int)(values[i]*1000.0));
    }

}

