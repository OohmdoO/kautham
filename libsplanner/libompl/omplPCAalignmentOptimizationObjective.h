/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#if !defined(_omplPCAOBJECTIVE_H)
#define _omplPCAOBJECTIVE_H

#if defined(KAUTHAM_USE_OMPL)

#include <ompl/base/SpaceInformation.h>
#include <ompl/base/OptimizationObjective.h>
#include <ompl/base/objectives/StateCostIntegralObjective.h>
#include <ompl/base/objectives/MechanicalWorkOptimizationObjective.h>
#include <ompl/base/ProjectionEvaluator.h>



namespace ob = ompl::base;


namespace Kautham {
/** \addtogroup libPlanner
 *  @{
 */
  namespace omplplanner{

    class PCAalignmentOptimizationObjective:public ob::OptimizationObjective {
        public:
        typedef boost::numeric::ublas::matrix<double> Matrix;

        ob::ProjectionMatrix pcaM;
        ob::EuclideanProjection lambda;//this is a typedef of boost::numeric::ublas::vector < double >
        bool PCAdataset;
        int dimension;
        double wpenalization;
        double wdistance;
        double wfix;

        PCAalignmentOptimizationObjective(const ob::SpaceInformationPtr &si, int dim);
        ~PCAalignmentOptimizationObjective();

        virtual ob::Cost motionCost(const ob::State *s1, const ob::State *s2) const;
        virtual ob::Cost motionCost(const ob::State *s0, const ob::State *s1, const ob::State *s2) const;
        virtual ob::Cost motionCostHeuristic(const ob::State *s1, const ob::State *s2) const;
        void setPCAdata(int v);//ob::ProjectionMatrix M, ob::EuclideanProjection v);
        inline bool isPCAdataset(){return PCAdataset;};
        inline double getOrientationPenalization(){return wpenalization;}
        inline void setOrientationPenalization(double w){wpenalization=w;};
        inline double getDistanceWeight(){return wdistance;}
        inline void setDistanceWeight(double w){wdistance=w;};
        inline void setFixWeight(double w){wfix=w;};
        inline double getFixWeight(){return wfix;};
      };

    class PCAalignmentOptimizationObjective2:public ob::OptimizationObjective {
        public:
        typedef boost::numeric::ublas::matrix<double> Matrix;

        ob::ProjectionMatrix pcaM;
        ob::EuclideanProjection lambda;//this is a typedef of boost::numeric::ublas::vector < double >
        bool PCAdataset;
        int dimension;
        double wdistance;
        double wfix;

        PCAalignmentOptimizationObjective2(const ob::SpaceInformationPtr &si, int dim);
        ~PCAalignmentOptimizationObjective2();

        //ob::Cost stateCost(const ob::State *s1) const;
        virtual ob::Cost motionCost(const ob::State *s1, const ob::State *s2) const;
        void setPCAdata(int v);//ob::ProjectionMatrix M, ob::EuclideanProjection v);
        inline bool isPCAdataset(){return PCAdataset;};
        inline double getDistanceWeight(){return wdistance;}
        inline void setDistanceWeight(double w){wdistance=w;};
        inline void setFixWeight(double w){wfix=w;};
        inline double getFixWeight(){return wfix;};
      };

    class PCAalignmentOptimizationObjective3:public ob::MechanicalWorkOptimizationObjective {
        public:
        typedef boost::numeric::ublas::matrix<double> Matrix;

        ob::ProjectionMatrix pcaM;
        std::vector<double> bari;
        ob::EuclideanProjection lambda;//this is a typedef of boost::numeric::ublas::vector < double >
        bool PCAdataset;
        int dimension;
        double wdistance;
        double wfix;

        PCAalignmentOptimizationObjective3(const ob::SpaceInformationPtr &si, int dim);
        ~PCAalignmentOptimizationObjective3();

        ob::Cost stateCost(const ob::State *s1) const;
        ob::Cost motionCost(const ob::State *s1, const ob::State *s2) const;
        void setPCAdata(int v);//ob::ProjectionMatrix M, ob::EuclideanProjection v);
        inline bool isPCAdataset(){return PCAdataset;};
        inline double getDistanceWeight(){return wdistance;}
        inline void setDistanceWeight(double w){wdistance=w;};
        inline void setFixWeight(double w){wfix=w;};
        inline double getFixWeight(){return wfix;};
      };


  }
  /** @}   end of Doxygen module "libPlanner */
}

#endif // KAUTHAM_USE_OMPL
#endif  //_omplPCAOBJECTIVE_H
