/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 

#if defined(KAUTHAM_USE_OMPL)
#include <libproblem/workspace.h>
#include <libsampling/sampling.h>

#include <boost/bind/mem_fn.hpp>

#include "omplRRTStarplanner.h"
#include "omplValidityChecker.h"


#include <ompl/base/OptimizationObjective.h>
#include <ompl/base/objectives/PathLengthOptimizationObjective.h>
#include <ompl/base/objectives/MaximizeMinClearanceObjective.h>
#include "omplPCAalignmentOptimizationObjective.h"

namespace Kautham {
/** \addtogroup libPlanner
 *  @{
 */
  namespace omplplanner{

    //! Constructor
    omplRRTStarPlanner::omplRRTStarPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, WorkSpace *ws):
              omplPlanner(stype, init, goal, samples, ws)
	{
        _guiName = "ompl RRT Star Planner";
        _idName = "omplRRTStar";


        //create simple setup
        ss = ((og::SimpleSetupPtr) new og::SimpleSetup(space));
        ob::SpaceInformationPtr si=ss->getSpaceInformation();
        //set validity checker
        si->setStateValidityChecker(ob::StateValidityCheckerPtr(new omplplanner::ValidityChecker(si,  (Planner*)this)));
        //ss->setStateValidityChecker(boost::bind(&omplplanner::isStateValid, si.get(), _1, (Planner*)this));

        //alloc valid state sampler
        si->setValidStateSamplerAllocator(boost::bind(&omplplanner::allocValidStateSampler, _1, (Planner*)this));
        //alloc state sampler
        space->setStateSamplerAllocator(boost::bind(&omplplanner::allocStateSampler, _1, (Planner*)this));

        //create planner
        ob::PlannerPtr planner(new og::RRTstar(si));

        //set planner parameters: range, goalbias, delay collision checking and optimization option
        _Range = 0.05;
        _GoalBias = (planner->as<og::RRTstar>())->getGoalBias();
        _DelayCC = (planner->as<og::RRTstar>())->getDelayCC();
        _opti = 0; //optimize path lenght by default
        addParameter("Range", _Range);
        addParameter("Goal Bias", _GoalBias);
        addParameter("DelayCC (0/1)", _DelayCC);
        addParameter("Optimize dist(0)/clear(1)/PCA(2)", _opti);
        planner->as<og::RRTstar>()->setRange(_Range);
        planner->as<og::RRTstar>()->setGoalBias(_GoalBias);
        planner->as<og::RRTstar>()->setDelayCC(_DelayCC);

        //optimization criteria
        ob::ProblemDefinitionPtr pdefPtr = ((ob::ProblemDefinitionPtr) new ob::ProblemDefinition(si));
        _lengthopti = ob::OptimizationObjectivePtr(new ob::PathLengthOptimizationObjective(ss->getSpaceInformation()));
        _clearanceopti = ob::OptimizationObjectivePtr(new ob::MaximizeMinClearanceObjective(ss->getSpaceInformation()));

        int dimpca=2;//de moment!!!!
        _pcaalignmentopti = ob::OptimizationObjectivePtr(new PCAalignmentOptimizationObjective(ss->getSpaceInformation(),dimpca));
        _changePCA=0;
        addParameter("change PCA", _changePCA);


        if(_opti==1)
            pdefPtr->setOptimizationObjective(_clearanceopti);
        else if(_opti==2)
            pdefPtr->setOptimizationObjective(_pcaalignmentopti);
        else //_opti==0 and default
            pdefPtr->setOptimizationObjective(_lengthopti);

        planner->setProblemDefinition(pdefPtr);
        planner->setup();

        //set the planner
        ss->setPlanner(planner);
    }

	//! void destructor
    omplRRTStarPlanner::~omplRRTStarPlanner(){
			
	}
	
	//! setParameters sets the parameters of the planner
    bool omplRRTStarPlanner::setParameters(){

      omplPlanner::setParameters();
      try{
        HASH_S_K::iterator it = _parameters.find("Range");
        if(it != _parameters.end()){
          _Range = it->second;
          ss->getPlanner()->as<og::RRTstar>()->setRange(_Range);
         }
        else
          return false;

        it = _parameters.find("Optimize dist(0)/clear(1)/PCA(2)");
        if(it != _parameters.end()){
            _opti = it->second;
            ob::ProblemDefinitionPtr pdefPtr = ss->getPlanner()->getProblemDefinition();
            if(_opti==1)
                pdefPtr->setOptimizationObjective(_clearanceopti);
            else if(_opti==2)
                pdefPtr->setOptimizationObjective(_pcaalignmentopti);
            else //_opti==0 and default
                pdefPtr->setOptimizationObjective(_lengthopti);
            ss->getPlanner()->setup();
        }
        else
          return false;

        it = _parameters.find("Goal Bias");
        if(it != _parameters.end()){
            _GoalBias = it->second;
            ss->getPlanner()->as<og::RRTstar>()->setGoalBias(_GoalBias);
        }
        else
          return false;

        it = _parameters.find("DelayCC (0/1)");
        if(it != _parameters.end()){
            if(it->second == 0) _DelayCC = false;
            else _DelayCC = true;
            ss->getPlanner()->as<og::RRTstar>()->setDelayCC(_DelayCC);
        }
        else
          return false;

        it = _parameters.find("change PCA");
        if(it != _parameters.end()){
            if(_opti==2)
            {
                _changePCA = it->second;
                ((PCAalignmentOptimizationObjective*)_pcaalignmentopti.get())->setPCAdata(_changePCA);
            }
        }
        else
          return false;


      }catch(...){
        return false;
      }
      return true;
    }
  }
  /** @}   end of Doxygen module "libPlanner */
}


#endif // KAUTHAM_USE_OMPL
