/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 

#if defined(KAUTHAM_USE_OMPL)
#include <libproblem/workspace.h>
#include <libsampling/sampling.h>

#include "omplValidityChecker.h"
#include "omplplanner.h"

namespace Kautham {
/** \addtogroup libPlanner
 *  @{
 */
  namespace omplplanner{

    // Returns whether the given state's position overlaps the obstacles
    bool ValidityChecker::isValid(const ob::State* state) const
    {
      //verify bounds
      if(thesi->satisfiesBounds(state)==false)
          return false;
      //create sample
      int d = theplanner->wkSpace()->getDimension();
      Sample *smp = new Sample(d);
      //copy the conf of the init smp. Needed to capture the home positions.
      smp->setMappedConf(theplanner->initSamp()->getMappedConf());
      //load the RobConf of smp form the values of the ompl::state
      ((omplPlanner*)theplanner)->omplState2smp(state,smp);
      //collision-check
      if( theplanner->wkSpace()->collisionCheck(smp) )
          return false;
      return true;
    }

    // Returns the distance from the given state's position to the obstacles
    double ValidityChecker::clearance(const ob::State* state) const
    {
      //verify bounds
      if(thesi->satisfiesBounds(state)==false)
          return false;
      //create sample
      int d = theplanner->wkSpace()->getDimension();
      Sample *smp = new Sample(d);
      //copy the conf of the init smp. Needed to capture the home positions.
      smp->setMappedConf(theplanner->initSamp()->getMappedConf());
      //load the RobConf of smp form the values of the ompl::state
      ((omplPlanner*)theplanner)->omplState2smp(state,smp);
      //distance-check
      vector<KthReal> *distvect;
      distvect = theplanner->wkSpace()->distanceCheck(smp);
      KthReal dist = 0.0;
      for(int i=0; i<distvect->size(); i++)
          if(dist>distvect->at(i)) dist = distvect->at(i);
      return dist;
    }

  }
  /** @}   end of Doxygen module "libPlanner */
}


#endif // KAUTHAM_USE_OMPL
