/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 

#include "device.h"
#include <sstream>
#include <string>
#include <cstdio>
#include <cstdlib>

using namespace std;

namespace libDevice{

  Device::Device(string name):KauthamObject(name){
    _incomingParameters.clear();
    _directReading = false; // Use the ioc::client
    _tcp = true;            // Use socket TCP
  }

  KthReal Device::getIncomingParameter(string key){
    HASH_S_K::iterator it = _incomingParameters.find(key);
    if(it != _incomingParameters.end() )
      return it->second;
    else
      throw -1;
  }

  string Device::getIncomingParametersAsString(){
    std::stringstream par;
    string p;
    par.precision(10);
    HASH_S_K::iterator it;
    for(it = _incomingParameters.begin(); it != _incomingParameters.end(); ++it) { 
      par << it->first << "|";
      par << it->second << "|"; 
    }
    p = par.str();
    return p.substr(0,p.length()-1);
  }

  bool Device::setIncomingParameter(string key, KthReal value){
    HASH_S_K::iterator it = _incomingParameters.find(key);
    if(it != _incomingParameters.end() ){
      it->second = value;
      return true;
    }
    return false;
  }

  // This is an example to show how to the setParameter method should be implemented.
  //bool Device::setParameters(){
  //  try{
  //      HASH_S_K::iterator it = _parameters.find("Fx");
  //      if(it != _parameters.end())
  //        xForce = it->second;
  //      else
  //        return false;
  //  }
  //}
}
