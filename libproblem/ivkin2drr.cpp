/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2011 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 
 
#include "ivkin2drr.h"
#include "robot.h"


namespace libProblem {
  
  IvKin2DRR::IvKin2DRR(Robot* const rob):InverseKinematic(rob){

    _target.resize(3);  // This contains the X, Y and Lefty parameters.
    _tcp[0] = 0.;
    _tcp[1] = 0.;
    _llong[0] = rob->getLink(2)->getA();
    _llong[1] = rob->getLink(3)->getA();
    addParameter("Px", _tcp[0]);
    addParameter("Py", _tcp[1]);
    addParameter("Shoulder Lefty?", 0. );
  }

  IvKin2DRR::~IvKin2DRR(){

  }


  bool IvKin2DRR::solve(){
    try{
      _tcp[0] = _target.at(0);
      _tcp[1] = _target.at(1);
      
      _targetTrans.setTranslation(mt::Point3(_tcp[0],_tcp[1], 0.));
      _targetTrans.setRotation(mt::Rotation(0., 0., 0., 1. ));
      
      KthReal b2 = _tcp[0]*_tcp[0] + _tcp[1]*_tcp[1]; //  by the Pythagorean theorem
      KthReal q1 = atan2(_tcp[1], _tcp[0]);
      KthReal l12 = _llong[0]*_llong[0];
      KthReal l22 =  _llong[1]*_llong[1];
      KthReal	q2 = acos((l12 - l22 + b2)/(2.*_llong[0]*sqrt(b2))); //(by the law of cosines)
      KthReal phi11 = q1 + q2;                                  //(I know you can handle addition)
      KthReal phi12 = q1 - q2;
      phi11 > M_PI ? phi11 -= M_PI : phi11;
      phi12 > M_PI ? phi12 -= M_PI : phi12;
      phi11 < -M_PI ? phi11 += M_PI : phi11;
      phi12 < -M_PI ? phi12 += M_PI : phi12;
	    KthReal phi2 = acos((l12 + l22 - b2)/(2.*_llong[0]*_llong[1])); //(by the law of cosines)
      KthReal phi22 = M_PI - phi2;
      KthReal phi21 = -M_PI + phi2;
      vector<KthReal> q;
      if( _robLefty ){
        q.push_back( phi11 );
        q.push_back( phi21 );
      }else{  // robot in righty configuration
        q.push_back( phi12 );
        q.push_back( phi22 );
      }
      _robConf.setRn(q); 
      return true;
    }catch(...){}
    return false;
  }

  bool IvKin2DRR::setParameters(){
    try{
        HASH_S_K::iterator it = _parameters.find("Px");
        if(it != _parameters.end())
          _target.at(0) = it->second;
        else
          return false;

        it = _parameters.find("Py");
        if(it != _parameters.end())
          _target.at(1) = it->second;
        else
          return false;

        it = _parameters.find("Shoulder Lefty?" );
        if(it != _parameters.end()){
          if(it->second == 1)
            _robLefty = true;
          else
            _robLefty = false;
        }else
          return false;

      }catch(...){
        std::cout << "Some throuble with the name or amount of parameters.\n" ;
        return false;
      }
      return true;
  }

}
