/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 

#if !defined(_GRIDPLANNER_H)
#define _GRIDPLANNER_H

#include <libproblem/workspace.h>
#include <libsampling/sampling.h>
#include <boost/property_map/property_map.hpp>
#include <boost/graph/adjacency_list.hpp>
#include "localplanner.h"
#include "planner.h"

using namespace std;
using namespace libSampling;
using namespace boost;

namespace libPlanner {
   namespace gridplanner{
	//Typedefs
    typedef Sample* location;
    typedef KthReal cost;
    typedef std::pair<int, int> gridEdge;
	 
	struct potential_value_t {
		typedef vertex_property_tag kind;
	};
    typedef boost::adjacency_list<boost::listS, boost::vecS, 
		boost::undirectedS, boost::property<potential_value_t, KthReal>, 
		boost::property<boost::edge_weight_t, cost> > gridGraph;
    typedef gridGraph::vertex_descriptor gridVertex;
    typedef property_map<gridGraph, boost::edge_weight_t>::type WeightMap;
    typedef property_map<gridGraph, potential_value_t>::type PotentialMap;
    typedef gridGraph::edge_descriptor edge_descriptor;
    typedef gridGraph::vertex_iterator vertex_iterator;




    class gridPlanner:public Planner {
	    public:
        gridPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler, 
          WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize);
        ~gridPlanner();
        
		bool trySolve() = 0;

		protected:

		int _stepsDiscretization;
		vector<gridEdge*> edges;
        //!edge weights
        vector<cost> weights;
        //!bool to determine if the graph has been loaded
        bool _isGraphSet;

	    //!load boost graph data
	    void loadGraph();	 
		//!delete g
	    void clearGraph();

		void discretizeCspace();
		void loadgrid(vector<KthReal> &coords, int coord_i);
		void connectgrid(vector<int> &index, int coord_i);

		inline void setPotential(int i, KthReal value){potmap[i]=value;};
		inline KthReal getPotential(int i){return potmap[i];};

	    private:
		//!boost graph
		gridGraph *g;
		//!solution to query
		list<gridVertex> shortest_path;
		//!pointer to the samples of cspace to be used by the distance_heuristic function used in A*
		vector<location> locations;

		//potential values at the cells of the grid
		PotentialMap potmap;
		

	  };
   }
}

#endif  //_GRIDPLANNER_H

