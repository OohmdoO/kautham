/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 

#include <libproblem/workspace.h>
#include <libsampling/sampling.h>
#include <libsampling/robconf.h>
#include "localplanner.h"
#include "guibroplanner.h"

using namespace libSampling;

namespace libPlanner {
   namespace GUIBRO{
	//! Constructor
    GUIBROPlanner::GUIBROPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler, WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize):
              Planner(stype, init, goal, samples, sampler, ws, lcPlan, ssize)
	{
		//set intial values
		_alpha = 0.1;
		_xi = 0.1;
		_deltaZ = 50;
	    _gen = new LCPRNG();

		//set intial values from parent class data
		_speedFactor = 1;
		_solved = false;
		setStepSize(ssize);//also changes stpssize of localplanner
	  
		_guiName = "GUIBRO Planner";
		addParameter("Step Size", ssize);
		addParameter("Speed Factor", _speedFactor);
		addParameter("1- Rotation (alpha)", _alpha);
		addParameter("2- Bending (xi)", _xi);
		addParameter("3- Advance (delta_z)", _deltaZ);

		removeParameter("Neigh Thresshold");
		removeParameter("Drawn Path Link");
		removeParameter("Max. Neighs");

    }

	//! void destructor
	GUIBROPlanner::~GUIBROPlanner(){
			
	}
	
	//! setParameters sets the parameters of the planner
    bool GUIBROPlanner::setParameters(){
      try{
        HASH_S_K::iterator it = _parameters.find("Step Size");
		if(it != _parameters.end())
			setStepSize(it->second);//also changes stpssize of localplanner
        else
          return false;

        it = _parameters.find("Speed Factor");
        if(it != _parameters.end())
          _speedFactor = it->second;
        else
          return false;

        it = _parameters.find("Max. Samples");
        if(it != _parameters.end()){
          _maxNumSamples = it->second;
		    }else
          return false;

		it = _parameters.find("1- Rotation (alpha)");
        if(it != _parameters.end())
			_alpha = it->second;
        else
          return false;

        it = _parameters.find("2- Bending (xi)");
        if(it != _parameters.end())
          _xi = it->second;
        else
          return false;


        it = _parameters.find("3- Advance (delta_z)");
        if(it != _parameters.end())
          _deltaZ = it->second;
        else
          return false;


      }catch(...){
        return false;
      }
      return true;
    }

	
	//! function to find a solution path
	/*
		bool GUIBROPlanner::applyRandControl(Sample *currSmp, Sample *newSmp)
		{
			RobConf *currentconf;
			//move to currSmp and return configMap
			currentconf = _wkSpace->getConfigMapping(currSmp).at(0);
			//compute a control u
			vector<KthReal> u;
			u.push_back( (_gen->d_rand()-0.5)*_alpha );
			u.push_back( (_gen->d_rand()-0.5)*_xi );
			u.push_back( - _deltaZ );//backwards

			//apply control u until collision:
			Sample *tmpSmp;
			tmpSmp = new Sample(_wkSpace->getDimension());
			//a) advance a deltaZ step
			vector<RobConf*> newconf;
			newconf.push_back( &_wkSpace->getRobot(0)->ConstrainedKinematics(u) );
			tmpSmp->setMappedConf(newconf);
			
			//b) keed advancing until collision
			bool advanced = false;
			while( ! _wkSpace->collisionCheck(tmpSmp))
			{
				advanced = true;
				currentconf = _wkSpace->getConfigMapping(tmpSmp).at(0);//move and update
				newconf[0] = &_wkSpace->getRobot(0)->ConstrainedKinematics(u);
				tmpSmp->setMappedConf(newconf);
			}
			//c) return the sample previous to the collision
			if(advanced)
			{
				//go forward one step
				u[2] = -u[2];
				currentconf = _wkSpace->getConfigMapping(tmpSmp).at(0);//move and update
				newconf[0] = &_wkSpace->getRobot(0)->ConstrainedKinematics(u);
				newSmp->setMappedConf(newconf);
				return true; //no collision: newSmp now contains the sample to be added to sample set
			}
			else return false; //collision - discard sample
			
	  	}
		*/

	//! function to find a solution path
		bool GUIBROPlanner::applyRandControl(guibroSample *currGsmp)
		{
			RobConf *currentconf;
			//move to currSmp and return configMap
			currentconf = _wkSpace->getConfigMapping(currGsmp->smpPtr).at(0);
			//compute a control u
			vector<KthReal> u;
			u.push_back( (_gen->d_rand()-0.5)*_alpha );
			u.push_back( (_gen->d_rand()-0.5)*_xi );
			u.push_back( - _deltaZ );//backwards

			//apply control u until collision:
			Sample *nextSmp;
			nextSmp = new Sample(_wkSpace->getDimension());
			//a) advance a deltaZ step
			vector<RobConf*> newconf;
			newconf.push_back( &_wkSpace->getRobot(0)->ConstrainedKinematics(u) );
			nextSmp->setMappedConf(newconf);
			
			//b) keed advancing until collision
			bool advanced = false;
			while( ! _wkSpace->collisionCheck(nextSmp))
			{
				advanced = true;
				currentconf = _wkSpace->getConfigMapping(nextSmp).at(0);//move and update
				newconf[0] = &_wkSpace->getRobot(0)->ConstrainedKinematics(u);
				nextSmp->setMappedConf(newconf);
			}
			//c) return the sample previous to the collision
			if(advanced)
			{
				_samples->add(nextSmp);
				//Define the first guibroSample and add to guibroSet
				guibroSample *gSmp = new guibroSample;
				gSmp->smpPtr = nextSmp;
				gSmp->parent = currGsmp;
				gSmp->length = 0; 
				gSmp->curvature = 0;
				gSmp->steps = 0;
				gSmp->u[0] = 0;
				gSmp->u[1] = 0;
				gSmp->u[2] = 0;
				_guibroSet.push_back(gSmp);
				return true; //no collision - sample added to samnpleset
			}
			else 
			{
				delete nextSmp;
				return false; //collision - sample discarded 
			}
			
	  	}
		


	//! function to find a solution path
		bool GUIBROPlanner::trySolve()
		{
			_solved = false;
			char sampleDIM = _wkSpace->getDimension();

			//Set _samples only with the initial sample
			if( _samples->getSize() > 0){
			    Sample *SmpInit;
			    Sample *SmpGoal;
				SmpInit = new Sample(sampleDIM);
				SmpInit->setCoords(_init->getCoords());
				_wkSpace->collisionCheck(SmpInit);
				SmpInit->setMappedConf(_wkSpace->getConfigMapping(_init));
				SmpGoal = new Sample(sampleDIM);
				SmpGoal->setCoords(_goal->getCoords());
				_wkSpace->collisionCheck(SmpGoal);
				SmpGoal->setMappedConf(_wkSpace->getConfigMapping(_goal));
				_samples->clear();
				_init=SmpInit;
				_goal=SmpGoal;
				
				_samples->add(_init);

				//Define the first guibroSample and add to guibroSet
				guibroSample *gSmp = new guibroSample;
				gSmp->smpPtr = _init;
				gSmp->parent = NULL;
				gSmp->length = 0; 
				gSmp->curvature = 0;
				gSmp->steps = 0;
				gSmp->u[0] = 0;
				gSmp->u[1] = 0;
				gSmp->u[2] = 0;
				_guibroSet.push_back(gSmp);
			}
			else
			{
				//no query have been set
				cout<<"Trysolve did nothing - no query have been set"<<endl;
				return false;
			}


			//Loop by growing the tree
			int count=1;
			int currentNumSamples = 1; //_guibroSet->getSize();
			for(int i=0; i<currentNumSamples; i++)
			{
					guibroSample *curr = _guibroSet.at(i);
					if(applyRandControl(curr))
					{
						count++;
					}
			}
			return _solved;
		}
	  }
}
