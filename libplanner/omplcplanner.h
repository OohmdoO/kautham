/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#if !defined(_omplcPLANNER_H)
#define _omplcPLANNER_H



#if defined(KAUTHAM_USE_OMPL)
#include <ompl/base/SpaceInformation.h>
#include <ompl/geometric/SimpleSetup.h>
#include <ompl/control/SimpleSetup.h>
#include <ompl/config.h>

#include <ompl/base/spaces/RealVectorStateSpace.h>
#include <ompl/base/spaces/SE3StateSpace.h>
#include <ompl/base/spaces/SO3StateSpace.h>
#include <ompl/control/spaces/RealVectorControlSpace.h>
#include <ompl/control/SpaceInformation.h>
namespace ob = ompl::base;
namespace og = ompl::geometric;
namespace oc = ompl::control;


#include <libproblem/workspace.h>
#include <libsampling/sampling.h>
//#include "localplanner.h"
#include "planner.h"


using namespace std;
using namespace libSampling;



namespace libPlanner {
  namespace omplcplanner{


    //Auxiliar functions
    bool isStateValid(const oc::SpaceInformation *si, const ob::State *state, Planner *p);


    //Class KinematicRobotModel
    /// Model defining the motion of the robot
    class KinematicRobotModel
    {
    public:
        KinematicRobotModel(const ob::StateSpace *space);
        virtual void operator()(const ob::State *state, const oc::Control *control, std::valarray<double> &dstate) const;
        void update(ob::State *state, const std::valarray<double> &dstate) const;
        void setParameter(int i, double d);
        double getParameter(int i);
    protected:
        const ob::StateSpace *space_;
        vector<double> param_;
    };

    //Class omplcPlanner
    class omplcPlanner:public Planner {
	    public:
        omplcPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler,
          WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize);
        ~omplcPlanner();
        
		bool trySolve();
		bool setParameters();
        //Add public data and functionsvoid
        SoSeparator *getIvCspaceScene();//reimplemented
        void drawCspace();
        void drawCspaceSE3();
        void drawCspaceRn();

        void omplState2smp(const ob::State *state, Sample* smp);
        void smp2omplScopedState(Sample* smp, ob::ScopedState<ob::CompoundStateSpace> *sstate);
        void omplScopedState2smp(ob::ScopedState<ob::CompoundStateSpace> sstate, Sample* smp);
        void filterBounds(double &l, double &h, double epsilon);

		protected:
		//Add protected data and functions
        KthReal _planningTime;


        oc::SimpleSetupPtr ss;
        ob::StateSpacePtr space;
        oc::ControlSpacePtr spacec;


	    private:
		//Add private data and functions
	  };
  }
}

#endif // KAUTHAM_USE_OMPL
#endif  //_omplcPLANNER_H

