/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 

#if !defined(_GUIBROGRIDPLANNER_H)
#define _GUIBROGRIDPLANNER_H

#include <libproblem/workspace.h>
#include <libsampling/sampling.h>
#include "localplanner.h"
#include "NF1planner.h"
#include "prmplanner.h"
#include "workspacegridPlanner.h"

using namespace std;
using namespace libSampling;

namespace libPlanner {
using namespace workspacegridplanner;
   namespace GUIBROGRID{

	struct guibroSample
	{
		Sample *smpPtr;
		guibroSample *parent;
		vector<guibroSample*> descendant;
		KthReal u[3];
		KthReal back_u2;
		KthReal length;
		KthReal curvature;
		KthReal steps;
		KthReal cost;
		bool leave;
		int id;
		bool collision;
		bool inversekin;
	};



    class GUIBROgridPlanner:public Planner {
	    public:
        GUIBROgridPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler, 
          WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize);
        ~GUIBROgridPlanner();

		bool trySolve();
		bool setParameters();

		bool applyRandControl(guibroSample *currGsmp);
		void printInfo(guibroSample *gs);
		void moveAlongPath(unsigned int step); //reimplemented
		//Add public data and functions

		protected:
		//Add protected data and functions	
		KthReal _alpha;
		KthReal _xi;
		KthReal _deltaZ;
		KthReal _minAdvanceStep;
		KthReal _maxAdvanceStep;
		int _stepsinterpolate;
		KthReal _wL;
		KthReal _wS;
		KthReal _wC;
	    LCPRNG*	_gen;
		bool _debug;
		KthReal _thresholdInvKin;
		int _drawnLink; //!>flag to show which link path is to be drawn

		vector<guibroSample*> _guibroSet;


		workspacegridPlanner* grid;

	    private:
		//Add private data and functions
			int* _showObstacle;

	  };
   }
}


#endif // _GUIBROGRIDPLANNER_H
