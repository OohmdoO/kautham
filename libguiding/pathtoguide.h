/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2011 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 


#if !defined(_PATH_TO_GUIDE_H)
#define _PATH_TO_GUIDE_H

#include <vector>
#include <libproblem/robot.h>
#include <libann/DNN/multiann.h>
#include <libutil/kauthamdefs.h>
#include <libproblem/inversekinematic.h>

using namespace Kautham;
using namespace libProblem;
using namespace libSampling;

namespace libGuiding{
typedef vector<KthReal> Xnode;
typedef vector<KthReal> Qnode;
//typedef vector<KthReal> Uvec;

class Uvec:public vector<KthReal>{
  KthReal _dist;
public:
  Uvec():_dist(0.){}
  Uvec(int k){resize(k, 0.);}
  KthReal dist() const {return _dist;}
  void dist(KthReal d){_dist = d >= 0? d: 0;}
};



  class PathToGuide{
  public:
    //! This construntor is used to create the PathToGuide object based on the path
    //! found by any planner and stored as a vector of RobConf.
    PathToGuide( Robot &rob );

    //! This is an overloaded constructor based on the pointer of the robot retrieved from the 
    //! workspace.
    PathToGuide( Robot* rob );

    //! This method resets all the attributes of the class based on the information of robot's path.
    bool reset();

    //! this method is only to know if the path has at least one node.
    bool empty(){ return _pathQ.size() == 0; }

    //! Returns the distance to the desired configuration qd. This method computes the qd and the
    //! unit magnetic vector used to generated the force to attract the user to the path in Q.
    KthReal     unitVectors(Qnode &qi, Qnode &qd, Uvec &um, Uvec &up  );

    ////! This method computes the unitary vector in the direction to apply the pushing force.
    //void        pushVectorQ( Qnode &qd, Uvec &up );

    //! Returns the distance to the desired cartesian pose xd. This method computes the xd and the
    //! unit magnetic vector used to generated the force to attract the user to the path in SE3.
    KthReal     unitVectors(Xnode &xi, Xnode &xd, int &k, KthReal &ratio, Uvec &um, Uvec &up, 
                  const KthReal EPSILON = 0. );

    ////! This method computes the unitary vector in the direction to apply the pushing force.
    //void        pushVectorX( Xnode &qd, Uvec &up );

    //! This method returns the index of the nearest point in the Q vector for the point used as a parameter.
    int         nearQ(const Qnode &qn );

    //! This method returns the indexs of the two nearest points in the Q vector for the point used as a parameter.
    bool        nearQ(const Qnode &qn, int* indexs );

    //! This method returns the nearest point in the Q vector for the point used as a parameter.
    void        nearQ(const Qnode &qn, Qnode& res );

    //* This method returns the two nearest points in the Q vector for the point used as a parameter.
    bool        nearQ(const Qnode &qn, Qnode res[] );

    //! This method returns the index of the nearest point in the X vector for the point used as a parameter.
    int         nearX(const Xnode &xn );

    //! This method returns the indexs of the two nearest points in the X vector for the point used as a parameter.
    bool        nearX(const Xnode &xn, int* indexs );

    //! This method returns the nearest point in the X vector for the point used as a parameter.
    void        nearX(const Xnode &xn, Xnode& res );

    //! This method returns the nearest point in the X vector for the point used as a parameter.
    bool        nearX(const Xnode &xn, Xnode res[] );

    
    //! This method removes the node pointed by the index from the respectives vectors. 
    inline bool removeNode(const unsigned int index ){
      try{
        if(index >= 0 && index < _pathQ.size() ){ 
          _pathQ.erase(_pathQ.begin() + index);
          _pathX.erase(_pathX.begin() + index);/**/
          recalculateANN();
          return true;
        }
      }catch(...){}
      return false;
    }

    //! Returns the layout of the robot at node index.
    inline libProblem::RobLayout getLayout(int index){ 
      if(index >= 0 && index < _layouts.size() )
        return _layouts.at(index);
      
      libProblem::RobLayout tmp;
      return tmp;
    }

    static mt::Transform xnode2tran(Xnode &xnode){
      mt::Transform tra( Rotation(xnode.at(3), xnode.at(4), xnode.at(5), xnode.at(6)),
                         Point3(xnode.at(0), xnode.at(1), xnode.at(2) ));
      return tra;

    }

    static Xnode tran2xnode(mt::Transform  &tran){
      Xnode anXnode( 7 );
      mt::Point3 &pos = tran.getTranslationRef();
      mt::Rotation &rot = tran.getRotationRef();

      for(int i = 0; i < 3; i++){
        anXnode.at(i) = pos.at(i);
        anXnode.at(i+3) = rot.at(i);
      }
      anXnode.at(6) = rot.at(3);

      return anXnode;
    }
    
  private:
    //! Default constructor is not available. 
    PathToGuide();

    //! This method recalculates the structures of the ANN in order to search the nearest one.
    void            recalculateANN();

    //! Vector who stores the path formed by the sequence of points in the cspace.
    vector<Qnode>   _pathQ;

    //! This vector is used to store the unit vector from the current point to next one.
    vector<Uvec>    _uvecQ;
    
    //! Vector who stores the path formed by the sequence of points in the cartesian space.
    vector<Xnode>   _pathX;

    //! This vector is used to store the unit vector from the current point to next one.
    vector<Uvec>    _uvecX;

    //! This vector stores the layout of the robot for each node in the pathQ;
    vector<libProblem::RobLayout> _layouts;
    
    //! ANN structure to search the nearest in cspace
  	MultiANN*       _nearestQ;

    //! ANN structure to search the nearest in cartesian space.
  	MultiANN*       _nearestX;

  	//!array of points for the ANN search for neighs
	  ANNpointArray	  _ptsQ;

    //!array of points for the ANN search for neighs
	  ANNpointArray	  _ptsX;

    //! Reference to the robot that will be guided.
    Robot&          _rob;
    
  };
}
#endif  //_PATH_TO_GUIDE_H