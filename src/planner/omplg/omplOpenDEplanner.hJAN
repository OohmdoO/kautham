/***************************************************************************
*               Generated by StarUML(tm) C++ Add-In                        *
***************************************************************************/
/***************************************************************************
*                                                                          *
*           Institute of Industrial and Control Engineering                *
*                 Technical University of Catalunya                        *
*                        Barcelona, Spain                                  *
*                                                                          *
*                Project Name:       Kautham Planner                       *
*                                                                          *
*     Copyright (C) 2007 - 2009 by Alexander Pérez and Jan Rosell          *
*            alexander.perez@upc.edu and jan.rosell@upc.edu                *
*                                                                          *
*             This is a motion planning tool to be used into               *
*             academic environment and it's provided without               *
*                     any warranty by the authors.                         *
*                                                                          *
*          Alexander Pérez is also with the Escuela Colombiana             *
*          de Ingeniería "Julio Garavito" placed in Bogotá D.C.            *
*             Colombia.  alexander.perez@escuelaing.edu.co                 *
*                                                                          *
***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#if !defined(_omplOpenDEPLANNER_H)
#define _omplOpenDEPLANNER_H

#if defined(KAUTHAM_USE_OMPL)
#include <ompl/base/SpaceInformation.h>
#include <extensions/opende/OpenDESimpleSetup.h>
#include <ode/ode.h>
#include <ompl/config.h>

namespace ob = ompl::base;
namespace og = ompl::geometric;
namespace oc = ompl::control;

#include <libproblem/workspace.h>
#include <libsampling/sampling.h>
#include "planner.h"


using namespace std;
using namespace libSampling;


namespace libPlanner {
  namespace omplcplanner{

  /////////////////////////////////////////////////////////////////////////////////////////////////
  //AUXILIAR Functions


  class KauthamEnvironment : public oc::OpenDEEnvironment
  {
  public:

      RigidBodyEnvironment(void) : oc::OpenDEEnvironment()
      {
          createWorld();
      }

      virtual ~RigidBodyEnvironment(void)
      {
          destroyWorld();
      }

      /**************************************************
       * Implementation of functions needed by planning *
       **************************************************/

      virtual unsigned int getControlDimension(void) const
      {
          return 3;
      }

      virtual void getControlBounds(std::vector<double> &lower, std::vector<double> &upper) const
      {
          static double maxForce = 0.2;
          lower.resize(3);
          lower[0] = -maxForce;
          lower[1] = -maxForce;
          lower[2] = -maxForce;

          upper.resize(3);
          upper[0] = maxForce;
          upper[1] = maxForce;
          upper[2] = maxForce;
      }

      virtual void applyControl(const double *control) const
      {
          dBodyAddForce(boxBody, control[0], control[1], control[2]);
      }

      virtual bool isValidCollision(dGeomID geom1, dGeomID geom2, const dContact& contact) const
      {
          return false;
      }

      virtual void setupContact(dGeomID geom1, dGeomID geom2, dContact &contact) const
      {
          contact.surface.mode = dContactSoftCFM | dContactApprox1;
          contact.surface.mu = 0.9;
          contact.surface.soft_cfm = 0.2;
      }

      /**************************************************/


      // OMPL does not require this function here; we implement it here
      // for convenience. This function is only OpenDE code to create a
      // simulation environment. At the end of the function, there is a
      // call to setPlanningParameters(), which configures members of
      // the base class needed by planners.
      void createWorld(void);

      // Clear all OpenDE objects
      void destroyWorld(void);

      // Set parameters needed by the base class (such as the bodies
      // that make up to state of the system we are planning for)
      void setPlanningParameters(void);

      // the simulation world
      dWorldID bodyWorld;

      // the space for all objects
      dSpaceID space;

      // the car mass
      dMass    m;

      // the body geom
      dGeomID  boxGeom;

      // the body
      dBodyID  boxBody;

  };



    /////////////////////////////////////////////////////////////////////////////////////////////////
    // Class omplcPlanner
    /////////////////////////////////////////////////////////////////////////////////////////////////
    //! This class is the base class for all the kautham planners that use the ompl::control planners.
    class omplOpenDEPlanner:public Planner {
	    public:
        omplOpenDEPlanner(SPACETYPE stype, Sample *init, Sample *goal, SampleSet *samples, Sampler *sampler,
          WorkSpace *ws, LocalPlanner *lcPlan, KthReal ssize);
        ~omplOpenDEPlanner();
        
		bool trySolve();
		bool setParameters();
        //Add public data and functionsvoid

		protected:
		//Add protected data and functions
        KthReal _planningTime;

        1) OpenDEStateSpace
        2) OpenDESimpleSetup
        3) OpenDEEnvironment
        4) OpenDEStatePropagator

        oc::OpenDESimpleSetupPtr ss;
        ob::OpenDEStateSpacePtr space;

	    private:
		//Add private data and functions
	  };
  }
}

#endif // KAUTHAM_USE_OMPL
#endif  //_omplOpenDEPLANNER_H

